pipeline {
    agent any
    parameters {
        string(name: 'Environment', defaultValue: params.Environment ?: '')
    }
    environment {
        AWS_REGION='us-east-1'
    }
    tools {
      maven 'Maven'
    }
    stages {
        stage('git') {
            steps {
                git branch: 'dev', url: 'https://github.com/QuantumQuackDoctor/restaurant-service.git'
            }
        }
        stage('test') {
            steps {
                sh "mvn clean test"
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "mvn sonar:sonar"
                }
            }
        }
        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline= true
            }
        }
        stage('package') {
            steps {
                sh "mvn clean package"
            }
        }
        stage('ECR Push') {
                steps {
                    script {
                        withCredentials([string(credentialsId:'cfe0c5bd-0177-404d-83e1-bbb3044b52d0', variable:'AWS_ID')])
                        {
                            sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                            sh "docker build -t restaurant-service-${params.Environment} ."
                            sh "docker tag restaurant-service-${params.Environment}:latest ${AWS_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/restaurant-service-${params.Environment}:latest"
                            sh "docker push ${AWS_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/restaurant-service-${params.Environment}:latest"
                        }
                    }
                }
            }
    stage('Template Update'){
            steps {
                withCredentials([string(credentialsId:'cfe0c5bd-0177-404d-83e1-bbb3044b52d0', variable:'AWS_ID')])
                {
                    sh "aws cloudformation deploy --stack-name RestaurantServiceStack --region ${AWS_REGION} --template-file restaurantService.template --parameter-overrides ImageURL=${AWS_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/restaurant-service-${params.Environment}:latest Environment=${params.Environment} BaseStackName=BaseInfrastructure  --capabilities CAPABILITY_NAMED_IAM"
                }
            }
        }
    }
    post {
        success {
            script {
                sh 'docker image prune -f -a'
            }
        }
    }
}