/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.smoothstack.user.api;

import com.database.ormlibrary.food.RestaurantEntity;
import com.smoothstack.user.model.Restaurant;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-30T22:10:31.533216200-06:00[America/Denver]")
@Validated
@Api(value = "restaurant", description = "the restaurant API")
public interface RestaurantApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /restaurant/image/{imageId} : Admin Upload Image
     * Uploads image at id, updates or creates document
     *
     * @param imageId  (required)
     * @param image  (optional)
     * @return Image uploaded (status code 200)
     */
    @ApiOperation(value = "Admin Upload Image", nickname = "adminUploadImage", notes = "Uploads image at id, updates or creates document", authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "food", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Image uploaded") })
    @PostMapping(
        value = "/restaurant/image/{imageId}",
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> adminUploadImage(@ApiParam(value = "",required=true) @PathVariable("imageId") String imageId,@ApiParam(value = "") @Valid @RequestPart(value = "image", required = false) MultipartFile image) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /restaurant : Admin Create Restaurant
     * Create new restaurant, images to be uploaded at POST /restaurant/image
     *
     * @param restaurant Restaurant object with null imageId&#39;s (optional)
     * @return Returns restaurant with populated imageId&#39;s, upload images at ids with POST /restaurant/image/{id} (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Admin Create Restaurant", nickname = "createRestaurant", notes = "Create new restaurant, images to be uploaded at POST /restaurant/image", response = RestaurantEntity.class, tags={ "food", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns restaurant with populated imageId's, upload images at ids with POST /restaurant/image/{id}", response = RestaurantEntity.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden") })
    @PutMapping(
        value = "/restaurant",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<RestaurantEntity> createRestaurant(@ApiParam(value = "Restaurant object with null imageId's"  )  @Valid @RequestBody(required = false) RestaurantEntity restaurant) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"iconId\" : \"\", \"hours\" : { \"THU\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"TUE\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"WED\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"SAT\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"FRI\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"MON\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"SUN\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" } }, \"address\" : \"address\", \"rating\" : 1, \"menu\" : [ { \"dietaryRestrictions\" : \"dietaryRestrictions\", \"configurations\" : [ \"configurations\", \"configurations\" ], \"imgPath\" : \"imgPath\", \"name\" : \"name\", \"allergens\" : \"allergens\" }, { \"dietaryRestrictions\" : \"dietaryRestrictions\", \"configurations\" : [ \"configurations\", \"configurations\" ], \"imgPath\" : \"imgPath\", \"name\" : \"name\", \"allergens\" : \"allergens\" } ], \"promotions\" : [ { \"promotionType\" : \"veteran\", \"condition\" : \"condition\", \"discount\" : 0.8008281904610115, \"discountType\" : \"percent\" }, { \"promotionType\" : \"veteran\", \"condition\" : \"condition\", \"discount\" : 0.8008281904610115, \"discountType\" : \"percent\" } ], \"averageTime\" : 5, \"ratings\" : [ { \"image\" : \"image\", \"description\" : \"description\", \"stars\" : 3 }, { \"image\" : \"image\", \"description\" : \"description\", \"stars\" : 3 } ], \"name\" : \"name\", \"id\" : \"id\", \"backgroundId\" : \"backgroundId\", \"priceRating\" : 2, \"geolocation\" : \"geolocation\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>aeiou</id> <name>aeiou</name> <iconId>aeiou</iconId> <backgroundId>aeiou</backgroundId> <rating>123</rating> <averageTime>123</averageTime> <priceRating>123</priceRating> <geolocation>aeiou</geolocation> <address>aeiou</address> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /restaurant : Admin Delete Restaurant
     * delete restaurant
     *
     * @param body Restuarant id to delete (optional)
     * @return Deleted (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Admin Delete Restaurant", nickname = "deleteRestaurant", notes = "delete restaurant", authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "food", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @DeleteMapping(
        value = "/restaurant",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> deleteRestaurant(@ApiParam(value = "Restuarant id to delete"  )  @Valid @RequestBody(required = false) Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /restaurant : Search Restaurants
     * Search food, matches to restaurant terms
     *
     * @param search Main search term (required)
     * @param geolocation Location to search around (required)
     * @param distance distance from location, default &lt;&#x3D;20 miles (optional)
     * @param filterAllergens comma separated list of allergens, exclude matches (optional)
     * @param filterDietaryRestrictions comma separated list of dietary restrictions, only show matches (optional)
     * @param stars &gt;&#x3D; stars will be included (optional)
     * @param page page to return indexed by 0 (optional)
     * @param size items in page (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Search Restaurants", nickname = "getFood", notes = "Search food, matches to restaurant terms", response = Restaurant.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "food", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Restaurant.class, responseContainer = "List") })
    @GetMapping(
        value = "/restaurant",
        produces = { "application/json" }
    )
    default ResponseEntity<List<RestaurantEntity>> getFood(@NotNull @ApiParam(value = "Main search term", required = true) @Valid @RequestParam(value = "search", required = true) String search, @NotNull @ApiParam(value = "Location to search around", required = true) @Valid @RequestParam(value = "geolocation", required = true) String geolocation, @ApiParam(value = "distance from location, default <=20 miles") @Valid @RequestParam(value = "distance", required = false) String distance, @ApiParam(value = "type of sort") @Valid @RequestParam(value = "sort_type", required = false) String sortType, @ApiParam(value = "sort values") @Valid @RequestParam(value = "sort_values", required = false) String sortValue, @ApiParam(value = ">= stars will be included") @Valid @RequestParam(value = "stars", required = false) Integer stars, @ApiParam(value = "<= price will be included") @Valid @RequestParam(value = "price", required = false) Integer price, @Min(0)@ApiParam(value = "page to return indexed by 0") @Valid @RequestParam(value = "page", required = false) Integer page, @Min(1)@ApiParam(value = "items in page") @Valid @RequestParam(value = "size", required = false) Integer size) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"iconId\" : \"\", \"hours\" : { \"THU\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"TUE\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"WED\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"SAT\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"FRI\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"MON\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" }, \"SUN\" : { \"start\" : \"20:32:23 GMT-0600\", \"end\" : \"20:32:23 GMT-0600\" } }, \"address\" : \"address\", \"rating\" : 1, \"menu\" : [ { \"dietaryRestrictions\" : \"dietaryRestrictions\", \"configurations\" : [ \"configurations\", \"configurations\" ], \"imgPath\" : \"imgPath\", \"name\" : \"name\", \"allergens\" : \"allergens\" }, { \"dietaryRestrictions\" : \"dietaryRestrictions\", \"configurations\" : [ \"configurations\", \"configurations\" ], \"imgPath\" : \"imgPath\", \"name\" : \"name\", \"allergens\" : \"allergens\" } ], \"promotions\" : [ { \"promotionType\" : \"veteran\", \"condition\" : \"condition\", \"discount\" : 0.8008281904610115, \"discountType\" : \"percent\" }, { \"promotionType\" : \"veteran\", \"condition\" : \"condition\", \"discount\" : 0.8008281904610115, \"discountType\" : \"percent\" } ], \"averageTime\" : 5, \"ratings\" : [ { \"image\" : \"image\", \"description\" : \"description\", \"stars\" : 3 }, { \"image\" : \"image\", \"description\" : \"description\", \"stars\" : 3 } ], \"name\" : \"name\", \"id\" : \"id\", \"backgroundId\" : \"backgroundId\", \"priceRating\" : 2, \"geolocation\" : \"geolocation\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /restaurant/image/{imageId} : Get image
     * Returns image 
     *
     * @param imageId  (required)
     * @return Returns requested image (status code 200)
     */
    @ApiOperation(value = "Get image", nickname = "getRestaurantImage", notes = "Returns image ", response = org.springframework.web.multipart.MultipartFile.class, authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "food", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns requested image", response = org.springframework.web.multipart.MultipartFile.class) })
    @GetMapping(
        value = "/restaurant/image/{imageId}",
        produces = { "image/_*" }
    )
    default ResponseEntity<org.springframework.web.multipart.MultipartFile> getRestaurantImage(@ApiParam(value = "",required=true) @PathVariable("imageId") String imageId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /restaurant/rating/{restaurantId} : Rate Restaurant
     * Post new restaurant rating (Server: extract userId from JWT)
     *
     * @param restaurantId restaurant to update (required)
     * @param stars  (optional)
     * @param description  (optional)
     * @param image  (optional)
     * @return Rating uploaded successfully (status code 200)
     *         or Missing field (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Restaurant not found (status code 404)
     */
    @ApiOperation(value = "Rate Restaurant", nickname = "newRating", notes = "Post new restaurant rating (Server: extract userId from JWT)", authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "food", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Rating uploaded successfully"),
        @ApiResponse(code = 400, message = "Missing field"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Restaurant not found") })
    @PutMapping(
        value = "/restaurant/rating/{restaurantId}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> newRating(@ApiParam(value = "restaurant to update",required=true) @PathVariable("restaurantId") String restaurantId,@ApiParam(value = "") @Valid @RequestPart(value = "stars", required = false)  Integer stars,@ApiParam(value = "") @Valid @RequestPart(value = "description", required = false)  String description,@ApiParam(value = "") @Valid @RequestPart(value = "image", required = false) MultipartFile image) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /restaurant : Admin Update Restaurant
     * Update any properties except image, to update image use POST /restaurant/image/{imageId}
     *
     * @param restaurant Non null properties will be updated, id necessary (optional)
     * @return Update successful (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Admin Update Restaurant", nickname = "updateRestaurant", notes = "Update any properties except image, to update image use POST /restaurant/image/{imageId}", authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "food", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Update successful"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @PatchMapping(
        value = "/restaurant",
        produces = { "application/json" },
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<Void> update



    (@ApiParam(value = "Non null properties will be updated, id necessary"  )  @Valid @RequestBody(required = false) RestaurantEntity restaurant) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
